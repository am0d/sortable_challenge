use std::error;
use std::fmt;

#[derive(Debug)]
enum SortableError {
    IOError(std::io::Error),
    SerdeError(serde::Error),
}


impl fmt::Display for SortableError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            SortableError::IOError(ref err) => write!(f, "IO error: {}", err),
            SortableError::SerdeError(ref err) => write!(f, "Deserialization error: {}", err),
        }
    }
}

impl error::Error for SortableError {
    fn description(&self) -> &str {
        match *self {
            SortableError::IOError(ref err) => err.description(),
            SortableError::SerdeError(ref err) => error::Error::description(err),
        }
    }

    fn cause(&self) -> Option<&error::Error> {
        match *self {
            SortableError::IOError(ref err) => Some(err),
            SortableError::SerdeError(ref err) => Some(err),
        }
    }
}
